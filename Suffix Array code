#include <bits/stdc++.h>
#define N '\n'
#define ll long long
#define L size()
using namespace std;
struct suffix
{
    int ind;
    char *suff;
};
int compare(struct suffix a,struct suffix b)
{
    if(strcmp(a.suff,b.suff)<0)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
int *buildarray(char *text,int n)
{
    struct suffix suffixes[n];
    for(int i=0;i<n;i++)
    {
        suffixes[i].ind=i;
        suffixes[i].suff=(text+i);
    }
    sort(suffixes,suffixes+n,compare);
    int *suffixarr=new int[n];
    for(int i=0;i<n;i++)
    {
        suffixarr[i]=suffixes[i].ind;
    }
    return suffixarr;
}
void seapat(char *pat,char *txt,int *suffixarr,int n)
{
    int len=strlen(pat);
    int l=0,r=n-1;
    while(l<=r)
    {
        int mid=(l+r)/2;
        int res=strncmp(pat,txt+suffixarr[mid],len);
        if(res==0)
        {
            cout<<"Pattern found at index "<<suffixarr[mid]<<N;
            return;
        }
        if(res<0)
        {
            r=mid-1;
        }
        else
        {
            l=mid+1;
        }
    }
    cout<<"Pattern not found"<<N;
}
void printArr(int arr[],int n)
{
    for(int i=0;i<n;i++)
    {
        cout<<arr[i]<<" ";
    }
    cout<<N;
}
int main()
{
    cout<<"Enter the text"<<N;
    char text[100];
    cin>>text;
    cout<<"Enter the pattern"<<N;
    char pat[100];
    cin>>pat;
    int n=strlen(text);
    int *suffixarr=buildarray(text,n);
    cout<<"Sorted Index\n";
    printArr(suffixarr,n);
    seapat(pat,text,suffixarr,n);
    return 0;
}
